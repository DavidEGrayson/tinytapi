# Handy command to look at first few bytes of all the TBD files.
find sdk/ -iname 'lib*.tbd' -exec od --format=x1 --read-bytes=16 {} ';' | sort | uniq

LinkerInterfaceFile::create
  loadFile(input, [ReadFlags::Symbols])

readFile(input, readFlags) -> InterfaceFile
  Registy.readFile(input, readFlags, ArchitectureSet::All())
    identify_magic(data)

TextStub_v1.cpp, canRead:
  - must start with: "---" or "--- !tapi-tbd-v1"
  - must end with:   ...

TextStub_v2.cpp, canRead:
  - must start with: --- !tapi-tbd-v2
  - must end with:   ...

TextStub_v3.cpp, canRead:  (not actually used!)
  - must start with: --- !tapi-tbd-v3
  - must end with:   ...


YAMLDocumentHandlers from Registry.addYAMLReaders():
  stub::v1::YAMLDocumentHandler -> lib/Core/TextStub_v1.cpp
  stub::v2::YAMLDocumentHandler
  api::v1::YAMLDocumentHandler
  configuration::v1::YAMLDocumentHandler


----

cpu_type_t and cpu_subtype_t:
Values we would care about are defined in
cctools/ld64/src/abstract/MachOFileAbstraction.hpp, archInfoArray[]:
"x86_64",  CPU_TYPE_X86_64, CPU_SUBTYPE_X86_64_ALL
"x86_64h", CPU_TYPE_X86_64, CPU_SUBTYPE_X86_64_H
"i386",    CPU_TYPE_I386,  CPU_SUBTYPE_I386_ALL,
"armv4t",  CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V4T,
"armv5",   CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V5TEJ,
"armv6",   CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V6,
"armv7",   CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V7,
"armv7f",  CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V7F,
"armv7k",  CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V7K,
"armv7s",  CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V7S,
"armv6m",  CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V6M,
"armv7m",  CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V7M,
"armv7em", CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V7EM,
"armv8",   CPU_TYPE_ARM,   CPU_SUBTYPE_ARM_V8,
"arm64",   CPU_TYPE_ARM64, CPU_SUBTYPE_ARM64_ALL
"arm64v8", CPU_TYPE_ARM64, CPU_SUBTYPE_ARM64_V8
